Mario
Estructuras de Datos y Algoritmos. Curso 2011-12.

Práctica: EL TOCADISCOS.

Contenido

Desarrollo de la práctica .................................................................................................................................... 2

Fase 1. La colección de discos. ...................................................................................................................... 2

Fase 2. Las pilas de discos y la estantería. ..................................................................................................... 3

Fase 3. El tocadiscos con eje.......................................................................................................................... 5

Interfaces usados en esta fase .................................................................................................................. 8

Fase 4. Consultas sobre canciones ................................................................................................................ 9

Desarrollo de la práctica

Fase 1. La colección de discos.

Disponemos de una colección de discos de vinilo. Cada disco tiene dos caras, y cada cara tiene una lista de
canciones.

Cada canción está interpretada por un intérprete, tiene un título, un género, y fue grabada en un
determinado año, posiblemente en directo, y tiene una duración en segundos.

La lista de géneros incluye clásica, pop, rock, jazz, dance y otros.

Del mismo modo, cada disco tendrá un intérprete y un título, y un año de edición. Y, por supuesto,
contendrá canciones en cada una de sus caras, que no necesariamente serán del mismo intérprete, ni
estilo, ni año. También tendrá una velocidad (esto es, el número de revoluciones por minuto a la que debe
girar el plato para escucharse).

Un intérprete tiene un nombre artístico, y un tipo. El tipo de artista puede ser solista (y dentro de esto,
masculino o femenino, grupo, u otros.

Las velocidades posibles son 33, 45 y 78 r.p.m.

Se pide:

Implementar la clase Intérprete. Usar un tipo enumerado para el tipo de intérprete.



Implementar la clase Canción. Usar un tipo enumerado para el género, que tenga exactamente los
valores que se indican.





Implementar la clase Cara. Usar una lista enlazada (NO un ArrayList) para la colección de canciones.



Implementar clase Disco. Usar un array de Java de tamaño 2 (new Cara[2]) para las caras. Usar un
tipo enumerado para las velocidades.

Implementar la clase ColecciónDiscos. Usar una lista enlazada para la lista de discos.





Dentro de la clase ColecciónDiscos, escribir un método que devuelva el primer disco que tiene un
determinado título (o null si no lo hubiera).



Dentro de la clase ColecciónDiscos, escribir métodos que devuelvan en una lista (sin enumerar
por pantalla):

o

Los discos de un determinado intérprete.

o

Las canciones de un determinado estilo.

o

Los discos en los que hay canciones con un determinado título.



Crear una clase Test, que a su vez contendrá un main.



Crear un método en la clase Test que inicialice nuestra ColecciónDiscos con unos cuantos discos,
cada uno con 3 a 5 canciones por cara para los de 33 rpm y 1 ó 2 por cara para los de 45 rpm. Usar

como mínimo los que se facilitan en el fichero Excel, y añadir 2 ó 3 discos más. Es posible que, en el
fichero Excel, falte o sobre algún dato.



Añadir en Test métodos que hagan pruebas de los métodos creados, esta vez sí, mostrándolos por
pantalla (primero se obtiene una lista, y luego se muestran sus elementos).

Crear en Test un método test, que haga las distintas llamadas a los métodos recién descritos de
creación y pruebas.



Inicialmente, la clase Test tendrá una estructura similar a ésta:
public class Test {
ColeccionDiscos coleccionDiscos = new ColeccionDiscos();
public void añadirDiscos() {
// crea los intérpretes, los discos, las canciones
…
};
public void probarBusquedas() {
…
};
public void test() {
añadirDiscos();
probarBusquedas();
};
public static void main(String[] args) {
Test test=new Test();
test.test();
}
}

Fase 2. Las pilas de discos y la estantería.

Siempre hemos apilado nuestros discos sobre dos sillas. Vamos pasando discos de uno en uno, de una silla
a la otra, hasta que encontramos el que buscamos.

Pero recientemente, además, hemos adquirido una estantería con casillas para los discos. Estas estanterías
están formadas por un número N de posiciones fijas (la nuestra tiene 16, pero hay estanterías de distintos
tamaños). Cada posición fija, o casilla, tiene asignado (o no) un disco mediante una etiqueta, pero hay que
tener en cuenta que el disco puede no estar físicamente en su sitio, incluso podemos equivocarnos y poner
un disco en el sitio de otro; lo único imposible es poner dos discos en un solo sitio. Tampoco es posible ver
qué disco hay en una casilla sin sacarlo.

Se pide:



Diseñar el TAD de la pila de discos en un interfaz IPilaDiscos.



Diseñar el TAD de la estantería en un interfaz IEstantería que contemple las operaciones
descritas y las consultas que se considere necesarias.



Implementar la clase PilaDiscos. Es posible usar un IStack (SStack) internamente.



Implementar la clase Estantería. Usar un array de Java internamente para las etiquetas, y otro
para los discos.

Añadir la estantería y las dos pilas de discos a la clase Test.





Crear métodos en la clase Test que:

o

Ponga inicialmente todos los discos de nuestra colección sobre una de las dos pilas.

o

Busque un disco con un nombre determinado en las dos pilas, dejándolo en la cima de la
pila 1 si lo encuentra. Sólo se podrán usar las dos pilas, pasando discos de una a otra.

o

Ponga los discos de las pilas (tantos como pueda) en la estantería. Primero pondrá los de la
pila 1, y luego los de la 2.

o

Coloque las etiquetas en la estantería. A cada casilla se le pondrá la etiqueta del disco que
contiene en ese momento.

o

Ordene las etiquetas (no los discos) por orden alfabético de intérprete, y dentro de los del
mismo intérprete, por orden del año de edición. Usar un algoritmo de ordenación por
burbuja, pero SIN crear un nuevo array auxiliar.

o

Usando una o las dos pilas, extraiga los discos de la estantería y los vuelva a colocar
correctamente, teniendo en cuenta la etiqueta.



Incorporar las llamadas a estos métodos a los métodos de prueba de la clase Test.

Como sugerencia, después de esta fase, la clase Test tendría una apariencia similar a ésta:

public class Test {
ColeccionDiscos coleccionDiscos = new ColeccionDiscos();
IPilaDiscos pilaDiscos1 = new PilaDiscos();
IPilaDiscos pilaDiscos2 = new PilaDiscos();
IEstanteria estanteria = new Estanteria(16);
public void añadirDiscos() {
…
};
public void probarBusquedas() {
…
};
public void probarPilas() {
…
};
public void probarEstanteria() {
…
};
public void test2() {
añadirDiscos();
probarBusquedas();
probarPilas();

probarEstanteria();
};
public static void main(String[] args) {
Test test=new Test();
test.test2();
}

}

Fase 3. El tocadiscos con eje

También disponemos de un tocadiscos de plato giratorio y aguja (de los de toda la vida). Estos tocadiscos
tienen un eje que se pincha en el plato, pero nuestro tocadiscos está equipado con un eje un poco más
complejo, ya que permite colocar varios discos en él, y es capaz de ir dejándolos caer, uno a uno, sobre el
plato. El eje, por tanto, contiene una serie de discos que están en espera de sonar. Eso sí, lógicamente, este
eje no es capaz de dar la vuelta a los discos, de forma que, de los discos que coloquemos sobre el eje, sólo
escucharemos una cara cuando caigan al plato.

El eje puede estar pinchado o no sobre un plato. Sólo podemos colocar discos en un eje cuando está
pinchado en un plato, y sólo podremos quitar el eje del plato cuando no tenga discos. Los discos se colocan
de uno a uno sobre el eje, con el tocadiscos en marcha o parado. Pero no es posible quitar los discos del
eje, ya que en esa operación es fácil que se rayen. El eje tiene una capacidad máxima de 5 discos, si bien no
se establece un límite en el número de discos que pueden caer sobre el plato.

Para quitar los discos que ya han caído al plato, hay que esperar a que todos estén sobre el plato (no puede
haber discos en el eje), a que éste esté parado, entonces se quita el eje, y se quitan todos a la vez. No es
posible quitar un solo disco.

Se puede echar un ojo a este blog para ver la historia de los tocadiscos, donde se
menciona brevemente el funcionamiento de un tocadiscos con un eje de este tipo.
http://peterpsych.blogspot.com/2009/04/el-definitivo-triunfo-del-vinilo.html

El plato puede estar en movimiento o parado, y dispone de un sensor gracias al cual es capaz de saber si
hay (al menos) un disco colocado sobre él. El tocadiscos no permitirá que la aguja se baje si no hay discos
colocados.

El tocadiscos contiene un ajuste de la velocidad a la que gira. No es posible cambiar la velocidad, ni detener
el plato, con la aguja bajada, ya que podría dañar al disco. Tampoco es posible bajar la aguja cuando el
plato está parado.

La aguja está inicialmente aparcada, posición desde la que, activando un control, se coloca sobre la posición
de inicio del disco, en posición elevada. Estando elevada, el usuario puede ajustar manualmente la distancia
a la que se encuentra del eje. Y una vez elevada, y siempre con el plato girando, la aguja se puede bajar

para que la música empiece a sonar. Para dejar de tocar, la aguja se levanta, y desde aquí se vuelve a
aparcar.

Usar un número con decimales entre 0 y 100 para indicar la distancia a la que se encuentra la aguja del eje
(donde 0 representa el inicio del disco, y 100 el final del disco). Cuando la aguja se aparca, su posición se fija
a un valor negativo, y se baja.

En una implementación real, la posición avanzaría cuando el plato está en marcha y la aguja bajada, pero
aquí no tenemos manera de hacerlo, así que obviaremos esta parte de la implementación.

Todas las clases deberán tener una gestión adecuada de las operaciones que sean imposibles, cada una a su
nivel. Por ejemplo, el tocadiscos no permitirá que se deje caer un disco si la aguja no está aparcada, cosa
que no puede evitar la aguja, pero ésta dará un error para esta misma operación si no está pinchada en un
plato.

Ya que no puede sonar, el tocadiscos dispondrá de un método que devuelva la canción que está sonando
en cada momento, o bien null si no está en marcha, con la aguja bajada, o con la velocidad correcta. Para
ello el plato también deberá devolver cuál es el disco y la cara que está colocada en la parte superior.

Se pide:



Ampliar la clase Cara con varios métodos que serán de utilidad más adelante:

Un método que devuelva una canción con un determinado título, o null si no la encuentra.

o

o

Un método que calcule la duración total de la cara.

o

Un método que indique la posición en la que debemos colocar la aguja (de 0 a 100) para
escuchar una canción contenida en dicha cara.

o

Un método que indique qué canción se escuchará con la aguja colocada en una posición
entre 0 y 100.



Incorporar al proyecto los interfaces IEje, IPlato, IAguja e ITocadiscos que se facilitan más
adelante.



Implementar la clase Eje. Decidir qué estructura de datos usar para la colección de discos que
están preparados para caer. Indicar y justificar brevemente la complejidad de las operaciones1.



Implementar la clase Plato. Decidir qué estructura de datos usar para representar la colección de
discos que ya están sobre el plato. Indicar y justificar brevemente la complejidad de las
operaciones.



Implementar la clase Aguja.



Implementar la clase Tocadiscos.

1

PISTA: El eje debe saber el plato sobre el que está colocado (si es que se encuentra pinchado, de lo contrario el plato
sería null), de forma que cuando dejemos caer un disco, vaya a parar al plato automáticamente.



Crear un método en la clase Test que, dado un disco (no un título, sino el disco), lo busque en la
estantería y en las pilas, y devuelva el disco si lo ha encontrado, o null si no lo encuentra. Al
término de este método, el disco se habrá extraído del lugar donde se encontrara.



Crear un método en la clase Test que, dado un disco, lo coloque en su casilla adecuada, o en una de
las pilas si no encuentra la casilla. Un método parecido a este ya se creó en la fase anterior para
todos los discos que estaban en una pila.



Crear un método en la clase Test que realice todas las operaciones necesarias para quitar los discos
que estén en el tocadiscos, y colocarlos en su sitio en la estantería, o sobre una de las pilas si es que
no tienen sitio en la estantería. Este método deberá tener en cuenta todos los casos posibles (que
el tocadiscos esté en marcha, etc.) de forma que en ningún caso pueda producirse un error. Se
usará el método anterior para colocar los discos.



Crear un método en la clase Test que, dado el título de una canción, la toque. Para ello, deberá en
primer lugar llamar al método anterior para vaciar el tocadiscos, luego saber cuál es el disco que
contiene la canción (y en qué cara está), luego buscarlo en la estantería o en las pilas (ya tenemos
un método para esto), luego colocarlo sobre el eje, dejarlo caer sobre el plato, poner en marcha el
tocadiscos tras fijar la velocidad adecuada, desaparcar la aguja, colocarla la posición adecuada, y
bajarla.



Realizar pruebas en la clase Test de los métodos enumerados.

Como sugerencia, después de esta fase, la clase Test tendría una apariencia similar a ésta:

public class Test {
ColeccionDiscos coleccionDiscos = new ColeccionDiscos();
IPilaDiscos pilaDiscos1 = new PilaDiscos();
IPilaDiscos pilaDiscos2 = new PilaDiscos();
IEstanteria estanteria = new Estanteria(16);
ITocadiscos tocadiscos = new Tocadiscos();
public void añadirDiscos() {
…
};
public void probarBusquedas() {
…
};
public void probarPilas() {
…
};
public void probarEstanteria() {
…
};
public void probarTocadiscos() {
…
};
public void test3() {
añadirDiscos();
probarBusquedas();
probarPilas();

probarEstanteria();
probarTocadiscos();
};
public static void main(String[] args) {
Test test=new Test();
test.test3();
}

}

Del mismo modo, la clase Tocadiscos será similar a este fragmento:

public class Tocadiscos implements ITocadiscos {
private IPlato plato = new Plato();
private IAguja aguja = new Aguja();
private IEje eje = new Eje();
…
}

Interfaces usados en esta fase
A continuación se detallan los interfaces que se usarán en esta fase. Sólo se podrán cambiar mínimos
detalles (por ejemplo, si no se usa un char para la cara), pero NO se podrá añadir ni quitar ningún método
ni parámetro.

IEje
public interface IEje {
void pincharEnPlato(IPlato plato);
void quitarDePlato();
void ponerdisco(Disco disco, char nombreCara);
void decarCaerDisco();
boolean estaPinchado();
boolean estaLleno();
boolean estaVacio();
}

IPlato
public interface IPlato{
public void arrancar();
public void parar();
public boolean estaArrancado();
public void fijarRpm(Rpm rpm);
public Rpm obtenerRpm();
public void ponerDisco(Disco disco, char nombreCara);
public ISList<Disco> quitarDiscos();
public boolean estaVacio();
public boolean tieneEje();
public void pincharEje(Eje eje);
public void quitarEje();
public Disco obtenerDisco();
public char obtenerNombreCara();
}

IAguja
public interface IAguja {
public boolean estaAparcada();
public void aparcar();
public void desaparcar();
public boolean estaBajada();
public void subir();
public void bajar();
public void fijarPosicion(float posicion); // 0-100%
public float obtenerPosicion(); // 0-100%
}

ITocadiscos
public interface ITocadiscos {
public boolean estaEjePinchado();
public void pincharEje();
public void despincharEje();
public boolean estaEjeVacio();
public boolean estaEjeLleno();
public boolean estaPlatoArrancado();
public void arrancarPlato();
public void pararPlato();
public void fijarRpmPlato (Rpm rpm);
public Rpm obtenerRpmPlato();
public void ponerDiscoEnEje (Disco disco, char nombreCara);
public void dejarCaerDiscoDeEje();
public ISList<Disco> quitarDiscosDelPlato();
public boolean estaAgujaAparcada();
public void aparcarAguja();
public void desaparcarAguja();
public boolean estaAgujaBajada();
public void subirAguja();
public void bajarAguja();
public void fijarPosicionAguja(float posicion); // 0-100%
public Disco obtenerDiscoCima();
public char obtenerNombreCaraCima();
public Cancion obtenerCancionSonando();
}

Fase 4. Consultas sobre canciones

Nos gustaría tener una lista de las canciones que hay en nuestra librería, ordenada de distintas formas.

Se pide:



Crear una clase ColecciónCanciones. Usar herencia a partir de una lista enlazada.



Añadir a la clase ColecciónCanciones:

o

Un constructor que cree la lista a partir de una colección de discos.

o

Un método que muestre por pantalla todo el contenido dela colección.

o

Un método que devuelva otra lista de canciones que contenga las que fueron interpretadas
por determinado intérprete.



Crear las clases ArbolCancionesPorTitulo y ArbolCancionesPorAño. Usar herencia a partir de un
árbol binario de búsqueda.



Añadir en AMBAS clases ArbolCancionesPorTitulo y ArbolCancionesPorAño:

o

Un constructor que cree la lista a partir de una colección de canciones.

o

Un método muestre por pantalla todo el contenido de estos árboles de canciones por su
orden correspondiente.

o

Un método que indique si existe una canción con un determinado título.

o

Un método que devuelva una colección de canciones que contenga con las canciones que
fueron grabadas entre dos años determinados.

o

Recordar que TODOS los métodos deben estar en AMBAS clases.



Añadir al main de la clase Test llamadas que prueben el funcionamiento de estos métodos.

Como sugerencia, después de esta fase, la clase Test tendría una apariencia similar a ésta:

public class Test {
ColeccionDiscos coleccionDiscos = new ColeccionDiscos();
IPilaDiscos pilaDiscos1 = new PilaDiscos();
IPilaDiscos pilaDiscos2 = new PilaDiscos();
IEstanteria estanteria = new Estanteria(16);
ITocadiscos tocadiscos = new Tocadiscos();
public void añadirDiscos() {
…
};
public void probarBusquedas() {
…
};
public void probarPilas() {
…
};
public void probarEstanteria() {
…
};
public void probarTocadiscos() {
…
};
public void test4() {

añadirDiscos();
probarBusquedas();
probarPilas();
probarEstanteria();
probarTocadiscos();
probarConsultas();
};
public static void main(String[] args) {
Test test=new Test();
test.test4();
}

}
